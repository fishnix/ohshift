// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"hash/maphash"

	"github.com/lib/pq"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var TableNames = struct {
	GooseDBVersions string
	Incidents       string
	TimelineEvents  string
}{
	GooseDBVersions: "goose_db_version",
	Incidents:       "incidents",
	TimelineEvents:  "timeline_events",
}

var ColumnNames = struct {
	GooseDBVersions gooseDBVersionColumnNames
	Incidents       incidentColumnNames
	TimelineEvents  timelineEventColumnNames
}{
	GooseDBVersions: gooseDBVersionColumnNames{
		ID:        "id",
		VersionID: "version_id",
		IsApplied: "is_applied",
		Tstamp:    "tstamp",
	},
	Incidents: incidentColumnNames{
		ID:             "id",
		SlackChannelID: "slack_channel_id",
		Status:         "status",
		Severity:       "severity",
		Title:          "title",
		Description:    "description",
		StartedBy:      "started_by",
		StartedAt:      "started_at",
		ResolvedBy:     "resolved_by",
		ResolvedAt:     "resolved_at",
		ExportURL:      "export_url",
		LastUpdated:    "last_updated",
	},
	TimelineEvents: timelineEventColumnNames{
		ID:             "id",
		IncidentID:     "incident_id",
		Timestamp:      "timestamp",
		EventType:      "event_type",
		SlackUserID:    "slack_user_id",
		SlackMessageTS: "slack_message_ts",
		Metadata:       "metadata",
	},
}

var (
	SelectWhere     = Where[*dialect.SelectQuery]()
	UpdateWhere     = Where[*dialect.UpdateQuery]()
	DeleteWhere     = Where[*dialect.DeleteQuery]()
	OnConflictWhere = Where[*clause.ConflictClause]() // Used in ON CONFLICT DO UPDATE
)

func Where[Q psql.Filterable]() struct {
	GooseDBVersions gooseDBVersionWhere[Q]
	Incidents       incidentWhere[Q]
	TimelineEvents  timelineEventWhere[Q]
} {
	return struct {
		GooseDBVersions gooseDBVersionWhere[Q]
		Incidents       incidentWhere[Q]
		TimelineEvents  timelineEventWhere[Q]
	}{
		GooseDBVersions: buildGooseDBVersionWhere[Q](GooseDBVersionColumns),
		Incidents:       buildIncidentWhere[Q](IncidentColumns),
		TimelineEvents:  buildTimelineEventWhere[Q](TimelineEventColumns),
	}
}

var Preload = getPreloaders()

type preloaders struct {
	Incident      incidentPreloader
	TimelineEvent timelineEventPreloader
}

func getPreloaders() preloaders {
	return preloaders{
		Incident:      buildIncidentPreloader(),
		TimelineEvent: buildTimelineEventPreloader(),
	}
}

var (
	SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()
	InsertThenLoad = getThenLoaders[*dialect.InsertQuery]()
	UpdateThenLoad = getThenLoaders[*dialect.UpdateQuery]()
)

type thenLoaders[Q orm.Loadable] struct {
	Incident      incidentThenLoader[Q]
	TimelineEvent timelineEventThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		Incident:      buildIncidentThenLoader[Q](),
		TimelineEvent: buildTimelineEventThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return orm.Loader[Q](func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		})
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	Incidents      joinSet[incidentJoins[Q]]
	TimelineEvents joinSet[timelineEventJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		Incidents:      buildJoinSet[incidentJoins[Q]](IncidentColumns, buildIncidentJoins),
		TimelineEvents: buildJoinSet[timelineEventJoins[Q]](TimelineEventColumns, buildTimelineEventJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}

// ErrUniqueConstraint captures all unique constraint errors by explicitly leaving `s` empty.
var ErrUniqueConstraint = &UniqueConstraintError{s: ""}

type UniqueConstraintError struct {
	// schema is the schema where the unique constraint is defined.
	schema string
	// table is the name of the table where the unique constraint is defined.
	table string
	// columns are the columns constituting the unique constraint.
	columns []string
	// s is a string uniquely identifying the constraint in the raw error message returned from the database.
	s string
}

func (e *UniqueConstraintError) Error() string {
	return e.s
}

func (e *UniqueConstraintError) Is(target error) bool {
	err, ok := target.(*pq.Error)
	if !ok {
		return false
	}
	return err.Code == "23505" && (e.s == "" || err.Constraint == e.s)
}
