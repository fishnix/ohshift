// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// TimelineEvent is an object representing the database table.
type TimelineEvent struct {
	ID             uuid.UUID                             `db:"id,pk" `
	IncidentID     uuid.UUID                             `db:"incident_id" `
	Timestamp      sql.Null[time.Time]                   `db:"timestamp" `
	EventType      string                                `db:"event_type" `
	SlackUserID    string                                `db:"slack_user_id" `
	SlackMessageTS sql.Null[string]                      `db:"slack_message_ts" `
	Metadata       sql.Null[types.JSON[json.RawMessage]] `db:"metadata" `

	R timelineEventR `db:"-" `
}

// TimelineEventSlice is an alias for a slice of pointers to TimelineEvent.
// This should almost always be used instead of []*TimelineEvent.
type TimelineEventSlice []*TimelineEvent

// TimelineEvents contains methods to work with the timeline_events table
var TimelineEvents = psql.NewTablex[*TimelineEvent, TimelineEventSlice, *TimelineEventSetter]("", "timeline_events")

// TimelineEventsQuery is a query on the timeline_events table
type TimelineEventsQuery = *psql.ViewQuery[*TimelineEvent, TimelineEventSlice]

// timelineEventR is where relationships are stored.
type timelineEventR struct {
	Incident *Incident // timeline_events.timeline_events_incident_id_fkey
}

type timelineEventColumnNames struct {
	ID             string
	IncidentID     string
	Timestamp      string
	EventType      string
	SlackUserID    string
	SlackMessageTS string
	Metadata       string
}

var TimelineEventColumns = buildTimelineEventColumns("timeline_events")

type timelineEventColumns struct {
	tableAlias     string
	ID             psql.Expression
	IncidentID     psql.Expression
	Timestamp      psql.Expression
	EventType      psql.Expression
	SlackUserID    psql.Expression
	SlackMessageTS psql.Expression
	Metadata       psql.Expression
}

func (c timelineEventColumns) Alias() string {
	return c.tableAlias
}

func (timelineEventColumns) AliasedAs(alias string) timelineEventColumns {
	return buildTimelineEventColumns(alias)
}

func buildTimelineEventColumns(alias string) timelineEventColumns {
	return timelineEventColumns{
		tableAlias:     alias,
		ID:             psql.Quote(alias, "id"),
		IncidentID:     psql.Quote(alias, "incident_id"),
		Timestamp:      psql.Quote(alias, "timestamp"),
		EventType:      psql.Quote(alias, "event_type"),
		SlackUserID:    psql.Quote(alias, "slack_user_id"),
		SlackMessageTS: psql.Quote(alias, "slack_message_ts"),
		Metadata:       psql.Quote(alias, "metadata"),
	}
}

type timelineEventWhere[Q psql.Filterable] struct {
	ID             psql.WhereMod[Q, uuid.UUID]
	IncidentID     psql.WhereMod[Q, uuid.UUID]
	Timestamp      psql.WhereNullMod[Q, time.Time]
	EventType      psql.WhereMod[Q, string]
	SlackUserID    psql.WhereMod[Q, string]
	SlackMessageTS psql.WhereNullMod[Q, string]
	Metadata       psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
}

func (timelineEventWhere[Q]) AliasedAs(alias string) timelineEventWhere[Q] {
	return buildTimelineEventWhere[Q](buildTimelineEventColumns(alias))
}

func buildTimelineEventWhere[Q psql.Filterable](cols timelineEventColumns) timelineEventWhere[Q] {
	return timelineEventWhere[Q]{
		ID:             psql.Where[Q, uuid.UUID](cols.ID),
		IncidentID:     psql.Where[Q, uuid.UUID](cols.IncidentID),
		Timestamp:      psql.WhereNull[Q, time.Time](cols.Timestamp),
		EventType:      psql.Where[Q, string](cols.EventType),
		SlackUserID:    psql.Where[Q, string](cols.SlackUserID),
		SlackMessageTS: psql.WhereNull[Q, string](cols.SlackMessageTS),
		Metadata:       psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.Metadata),
	}
}

var TimelineEventErrors = &timelineEventErrors{
	ErrUniqueTimelineEventsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "timeline_events",
		columns: []string{"id"},
		s:       "timeline_events_pkey",
	},
}

type timelineEventErrors struct {
	ErrUniqueTimelineEventsPkey *UniqueConstraintError
}

// TimelineEventSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TimelineEventSetter struct {
	ID             *uuid.UUID                             `db:"id,pk" `
	IncidentID     *uuid.UUID                             `db:"incident_id" `
	Timestamp      *sql.Null[time.Time]                   `db:"timestamp" `
	EventType      *string                                `db:"event_type" `
	SlackUserID    *string                                `db:"slack_user_id" `
	SlackMessageTS *sql.Null[string]                      `db:"slack_message_ts" `
	Metadata       *sql.Null[types.JSON[json.RawMessage]] `db:"metadata" `
}

func (s TimelineEventSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.IncidentID != nil {
		vals = append(vals, "incident_id")
	}

	if s.Timestamp != nil {
		vals = append(vals, "timestamp")
	}

	if s.EventType != nil {
		vals = append(vals, "event_type")
	}

	if s.SlackUserID != nil {
		vals = append(vals, "slack_user_id")
	}

	if s.SlackMessageTS != nil {
		vals = append(vals, "slack_message_ts")
	}

	if s.Metadata != nil {
		vals = append(vals, "metadata")
	}

	return vals
}

func (s TimelineEventSetter) Overwrite(t *TimelineEvent) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.IncidentID != nil {
		t.IncidentID = *s.IncidentID
	}
	if s.Timestamp != nil {
		t.Timestamp = *s.Timestamp
	}
	if s.EventType != nil {
		t.EventType = *s.EventType
	}
	if s.SlackUserID != nil {
		t.SlackUserID = *s.SlackUserID
	}
	if s.SlackMessageTS != nil {
		t.SlackMessageTS = *s.SlackMessageTS
	}
	if s.Metadata != nil {
		t.Metadata = *s.Metadata
	}
}

func (s *TimelineEventSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return TimelineEvents.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.IncidentID != nil {
			vals[1] = psql.Arg(*s.IncidentID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Timestamp != nil {
			vals[2] = psql.Arg(*s.Timestamp)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.EventType != nil {
			vals[3] = psql.Arg(*s.EventType)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.SlackUserID != nil {
			vals[4] = psql.Arg(*s.SlackUserID)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.SlackMessageTS != nil {
			vals[5] = psql.Arg(*s.SlackMessageTS)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Metadata != nil {
			vals[6] = psql.Arg(*s.Metadata)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TimelineEventSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TimelineEventSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.IncidentID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "incident_id")...),
			psql.Arg(s.IncidentID),
		}})
	}

	if s.Timestamp != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timestamp")...),
			psql.Arg(s.Timestamp),
		}})
	}

	if s.EventType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_type")...),
			psql.Arg(s.EventType),
		}})
	}

	if s.SlackUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "slack_user_id")...),
			psql.Arg(s.SlackUserID),
		}})
	}

	if s.SlackMessageTS != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "slack_message_ts")...),
			psql.Arg(s.SlackMessageTS),
		}})
	}

	if s.Metadata != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "metadata")...),
			psql.Arg(s.Metadata),
		}})
	}

	return exprs
}

// FindTimelineEvent retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTimelineEvent(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*TimelineEvent, error) {
	if len(cols) == 0 {
		return TimelineEvents.Query(
			SelectWhere.TimelineEvents.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return TimelineEvents.Query(
		SelectWhere.TimelineEvents.ID.EQ(IDPK),
		sm.Columns(TimelineEvents.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TimelineEventExists checks the presence of a single record by primary key
func TimelineEventExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TimelineEvents.Query(
		SelectWhere.TimelineEvents.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after TimelineEvent is retrieved from the database
func (o *TimelineEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TimelineEvents.AfterSelectHooks.RunHooks(ctx, exec, TimelineEventSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = TimelineEvents.AfterInsertHooks.RunHooks(ctx, exec, TimelineEventSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = TimelineEvents.AfterUpdateHooks.RunHooks(ctx, exec, TimelineEventSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = TimelineEvents.AfterDeleteHooks.RunHooks(ctx, exec, TimelineEventSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the TimelineEvent
func (o *TimelineEvent) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *TimelineEvent) pkEQ() dialect.Expression {
	return psql.Quote("timeline_events", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the TimelineEvent
func (o *TimelineEvent) Update(ctx context.Context, exec bob.Executor, s *TimelineEventSetter) error {
	v, err := TimelineEvents.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single TimelineEvent record with an executor
func (o *TimelineEvent) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := TimelineEvents.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the TimelineEvent using the executor
func (o *TimelineEvent) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TimelineEvents.Query(
		SelectWhere.TimelineEvents.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TimelineEventSlice is retrieved from the database
func (o TimelineEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TimelineEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = TimelineEvents.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = TimelineEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = TimelineEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TimelineEventSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("timeline_events", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TimelineEventSlice) copyMatchingRows(from ...*TimelineEvent) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TimelineEventSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TimelineEvents.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TimelineEvent:
				o.copyMatchingRows(retrieved)
			case []*TimelineEvent:
				o.copyMatchingRows(retrieved...)
			case TimelineEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TimelineEvent or a slice of TimelineEvent
				// then run the AfterUpdateHooks on the slice
				_, err = TimelineEvents.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TimelineEventSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TimelineEvents.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TimelineEvent:
				o.copyMatchingRows(retrieved)
			case []*TimelineEvent:
				o.copyMatchingRows(retrieved...)
			case TimelineEventSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TimelineEvent or a slice of TimelineEvent
				// then run the AfterDeleteHooks on the slice
				_, err = TimelineEvents.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TimelineEventSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TimelineEventSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TimelineEvents.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TimelineEventSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TimelineEvents.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TimelineEventSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := TimelineEvents.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type timelineEventJoins[Q dialect.Joinable] struct {
	typ      string
	Incident modAs[Q, incidentColumns]
}

func (j timelineEventJoins[Q]) aliasedAs(alias string) timelineEventJoins[Q] {
	return buildTimelineEventJoins[Q](buildTimelineEventColumns(alias), j.typ)
}

func buildTimelineEventJoins[Q dialect.Joinable](cols timelineEventColumns, typ string) timelineEventJoins[Q] {
	return timelineEventJoins[Q]{
		typ: typ,
		Incident: modAs[Q, incidentColumns]{
			c: IncidentColumns,
			f: func(to incidentColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Incidents.Name().As(to.Alias())).On(
						to.ID.EQ(cols.IncidentID),
					))
				}

				return mods
			},
		},
	}
}

// Incident starts a query for related objects on incidents
func (o *TimelineEvent) Incident(mods ...bob.Mod[*dialect.SelectQuery]) IncidentsQuery {
	return Incidents.Query(append(mods,
		sm.Where(IncidentColumns.ID.EQ(psql.Arg(o.IncidentID))),
	)...)
}

func (os TimelineEventSlice) Incident(mods ...bob.Mod[*dialect.SelectQuery]) IncidentsQuery {
	pkIncidentID := make(pgtypes.Array[uuid.UUID], len(os))
	for i, o := range os {
		pkIncidentID[i] = o.IncidentID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkIncidentID), "uuid[]")),
	))

	return Incidents.Query(append(mods,
		sm.Where(psql.Group(IncidentColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *TimelineEvent) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Incident":
		rel, ok := retrieved.(*Incident)
		if !ok {
			return fmt.Errorf("timelineEvent cannot load %T as %q", retrieved, name)
		}

		o.R.Incident = rel

		if rel != nil {
			rel.R.TimelineEvents = TimelineEventSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("timelineEvent has no relationship %q", name)
	}
}

type timelineEventPreloader struct {
	Incident func(...psql.PreloadOption) psql.Preloader
}

func buildTimelineEventPreloader() timelineEventPreloader {
	return timelineEventPreloader{
		Incident: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Incident, IncidentSlice](orm.Relationship{
				Name: "Incident",
				Sides: []orm.RelSide{
					{
						From: TableNames.TimelineEvents,
						To:   TableNames.Incidents,
						FromColumns: []string{
							ColumnNames.TimelineEvents.IncidentID,
						},
						ToColumns: []string{
							ColumnNames.Incidents.ID,
						},
					},
				},
			}, Incidents.Columns().Names(), opts...)
		},
	}
}

type timelineEventThenLoader[Q orm.Loadable] struct {
	Incident func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildTimelineEventThenLoader[Q orm.Loadable]() timelineEventThenLoader[Q] {
	type IncidentLoadInterface interface {
		LoadIncident(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return timelineEventThenLoader[Q]{
		Incident: thenLoadBuilder[Q](
			"Incident",
			func(ctx context.Context, exec bob.Executor, retrieved IncidentLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadIncident(ctx, exec, mods...)
			},
		),
	}
}

// LoadIncident loads the timelineEvent's Incident into the .R struct
func (o *TimelineEvent) LoadIncident(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Incident = nil

	related, err := o.Incident(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TimelineEvents = TimelineEventSlice{o}

	o.R.Incident = related
	return nil
}

// LoadIncident loads the timelineEvent's Incident into the .R struct
func (os TimelineEventSlice) LoadIncident(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	incidents, err := os.Incident(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range incidents {
			if o.IncidentID != rel.ID {
				continue
			}

			rel.R.TimelineEvents = append(rel.R.TimelineEvents, o)

			o.R.Incident = rel
			break
		}
	}

	return nil
}

func attachTimelineEventIncident0(ctx context.Context, exec bob.Executor, count int, timelineEvent0 *TimelineEvent, incident1 *Incident) (*TimelineEvent, error) {
	setter := &TimelineEventSetter{
		IncidentID: &incident1.ID,
	}

	err := timelineEvent0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTimelineEventIncident0: %w", err)
	}

	return timelineEvent0, nil
}

func (timelineEvent0 *TimelineEvent) InsertIncident(ctx context.Context, exec bob.Executor, related *IncidentSetter) error {
	incident1, err := Incidents.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTimelineEventIncident0(ctx, exec, 1, timelineEvent0, incident1)
	if err != nil {
		return err
	}

	timelineEvent0.R.Incident = incident1

	incident1.R.TimelineEvents = append(incident1.R.TimelineEvents, timelineEvent0)

	return nil
}

func (timelineEvent0 *TimelineEvent) AttachIncident(ctx context.Context, exec bob.Executor, incident1 *Incident) error {
	var err error

	_, err = attachTimelineEventIncident0(ctx, exec, 1, timelineEvent0, incident1)
	if err != nil {
		return err
	}

	timelineEvent0.R.Incident = incident1

	incident1.R.TimelineEvents = append(incident1.R.TimelineEvents, timelineEvent0)

	return nil
}
