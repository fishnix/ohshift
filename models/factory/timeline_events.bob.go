// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"encoding/json"
	"testing"
	"time"

	models "github.com/fishnix/ohshift/models"
	"github.com/gofrs/uuid/v5"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type TimelineEventMod interface {
	Apply(context.Context, *TimelineEventTemplate)
}

type TimelineEventModFunc func(context.Context, *TimelineEventTemplate)

func (f TimelineEventModFunc) Apply(ctx context.Context, n *TimelineEventTemplate) {
	f(ctx, n)
}

type TimelineEventModSlice []TimelineEventMod

func (mods TimelineEventModSlice) Apply(ctx context.Context, n *TimelineEventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// TimelineEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TimelineEventTemplate struct {
	ID             func() uuid.UUID
	IncidentID     func() uuid.UUID
	Timestamp      func() sql.Null[time.Time]
	EventType      func() string
	SlackUserID    func() string
	SlackMessageTS func() sql.Null[string]
	Metadata       func() sql.Null[types.JSON[json.RawMessage]]

	r timelineEventR
	f *Factory
}

type timelineEventR struct {
	Incident *timelineEventRIncidentR
}

type timelineEventRIncidentR struct {
	o *IncidentTemplate
}

// Apply mods to the TimelineEventTemplate
func (o *TimelineEventTemplate) Apply(ctx context.Context, mods ...TimelineEventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.TimelineEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t TimelineEventTemplate) setModelRels(o *models.TimelineEvent) {
	if t.r.Incident != nil {
		rel := t.r.Incident.o.Build()
		rel.R.TimelineEvents = append(rel.R.TimelineEvents, o)
		o.IncidentID = rel.ID // h2
		o.R.Incident = rel
	}
}

// BuildSetter returns an *models.TimelineEventSetter
// this does nothing with the relationship templates
func (o TimelineEventTemplate) BuildSetter() *models.TimelineEventSetter {
	m := &models.TimelineEventSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.IncidentID != nil {
		val := o.IncidentID()
		m.IncidentID = &val
	}
	if o.Timestamp != nil {
		val := o.Timestamp()
		m.Timestamp = &val
	}
	if o.EventType != nil {
		val := o.EventType()
		m.EventType = &val
	}
	if o.SlackUserID != nil {
		val := o.SlackUserID()
		m.SlackUserID = &val
	}
	if o.SlackMessageTS != nil {
		val := o.SlackMessageTS()
		m.SlackMessageTS = &val
	}
	if o.Metadata != nil {
		val := o.Metadata()
		m.Metadata = &val
	}

	return m
}

// BuildManySetter returns an []*models.TimelineEventSetter
// this does nothing with the relationship templates
func (o TimelineEventTemplate) BuildManySetter(number int) []*models.TimelineEventSetter {
	m := make([]*models.TimelineEventSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.TimelineEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TimelineEventTemplate.Create
func (o TimelineEventTemplate) Build() *models.TimelineEvent {
	m := &models.TimelineEvent{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.IncidentID != nil {
		m.IncidentID = o.IncidentID()
	}
	if o.Timestamp != nil {
		m.Timestamp = o.Timestamp()
	}
	if o.EventType != nil {
		m.EventType = o.EventType()
	}
	if o.SlackUserID != nil {
		m.SlackUserID = o.SlackUserID()
	}
	if o.SlackMessageTS != nil {
		m.SlackMessageTS = o.SlackMessageTS()
	}
	if o.Metadata != nil {
		m.Metadata = o.Metadata()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TimelineEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TimelineEventTemplate.CreateMany
func (o TimelineEventTemplate) BuildMany(number int) models.TimelineEventSlice {
	m := make(models.TimelineEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTimelineEvent(m *models.TimelineEventSetter) {
	if m.IncidentID == nil {
		val := random_uuid_UUID(nil)
		m.IncidentID = &val
	}
	if m.EventType == nil {
		val := random_string(nil, "50")
		m.EventType = &val
	}
	if m.SlackUserID == nil {
		val := random_string(nil)
		m.SlackUserID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.TimelineEvent
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TimelineEventTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.TimelineEvent) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a timelineEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TimelineEventTemplate) Create(ctx context.Context, exec bob.Executor) (*models.TimelineEvent, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a timelineEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TimelineEventTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.TimelineEvent {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a timelineEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TimelineEventTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.TimelineEvent {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a timelineEvent and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TimelineEventTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.TimelineEvent, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTimelineEvent(opt)

	if o.r.Incident == nil {
		TimelineEventMods.WithNewIncident().Apply(ctx, o)
	}

	rel0, ok := incidentCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.Incident.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.IncidentID = &rel0.ID

	m, err := models.TimelineEvents.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = timelineEventCtx.WithValue(ctx, m)

	m.R.Incident = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple timelineEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TimelineEventTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TimelineEventSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple timelineEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TimelineEventTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TimelineEventSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple timelineEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TimelineEventTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TimelineEventSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple timelineEvents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TimelineEventTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TimelineEventSlice, error) {
	var err error
	m := make(models.TimelineEventSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// TimelineEvent has methods that act as mods for the TimelineEventTemplate
var TimelineEventMods timelineEventMods

type timelineEventMods struct{}

func (m timelineEventMods) RandomizeAllColumns(f *faker.Faker) TimelineEventMod {
	return TimelineEventModSlice{
		TimelineEventMods.RandomID(f),
		TimelineEventMods.RandomIncidentID(f),
		TimelineEventMods.RandomTimestamp(f),
		TimelineEventMods.RandomEventType(f),
		TimelineEventMods.RandomSlackUserID(f),
		TimelineEventMods.RandomSlackMessageTS(f),
		TimelineEventMods.RandomMetadata(f),
	}
}

// Set the model columns to this value
func (m timelineEventMods) ID(val uuid.UUID) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) IDFunc(f func() uuid.UUID) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetID() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timelineEventMods) RandomID(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.ID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) IncidentID(val uuid.UUID) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.IncidentID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) IncidentIDFunc(f func() uuid.UUID) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.IncidentID = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetIncidentID() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.IncidentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timelineEventMods) RandomIncidentID(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.IncidentID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) Timestamp(val sql.Null[time.Time]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) TimestampFunc(f func() sql.Null[time.Time]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Timestamp = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetTimestamp() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Timestamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m timelineEventMods) RandomTimestamp(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m timelineEventMods) RandomTimestampNotNull(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Timestamp = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) EventType(val string) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.EventType = func() string { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) EventTypeFunc(f func() string) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.EventType = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetEventType() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.EventType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timelineEventMods) RandomEventType(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.EventType = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) SlackUserID(val string) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackUserID = func() string { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) SlackUserIDFunc(f func() string) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackUserID = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetSlackUserID() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackUserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timelineEventMods) RandomSlackUserID(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackUserID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) SlackMessageTS(val sql.Null[string]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackMessageTS = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) SlackMessageTSFunc(f func() sql.Null[string]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackMessageTS = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetSlackMessageTS() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackMessageTS = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m timelineEventMods) RandomSlackMessageTS(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackMessageTS = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m timelineEventMods) RandomSlackMessageTSNotNull(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.SlackMessageTS = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m timelineEventMods) Metadata(val sql.Null[types.JSON[json.RawMessage]]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Metadata = func() sql.Null[types.JSON[json.RawMessage]] { return val }
	})
}

// Set the Column from the function
func (m timelineEventMods) MetadataFunc(f func() sql.Null[types.JSON[json.RawMessage]]) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Metadata = f
	})
}

// Clear any values for the column
func (m timelineEventMods) UnsetMetadata() TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Metadata = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m timelineEventMods) RandomMetadata(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Metadata = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m timelineEventMods) RandomMetadataNotNull(f *faker.Faker) TimelineEventMod {
	return TimelineEventModFunc(func(_ context.Context, o *TimelineEventTemplate) {
		o.Metadata = func() sql.Null[types.JSON[json.RawMessage]] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_types_JSON_json_RawMessage_(f)
			return sql.Null[types.JSON[json.RawMessage]]{V: val, Valid: true}
		}
	})
}

func (m timelineEventMods) WithParentsCascading() TimelineEventMod {
	return TimelineEventModFunc(func(ctx context.Context, o *TimelineEventTemplate) {
		if isDone, _ := timelineEventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = timelineEventWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewIncident(ctx, IncidentMods.WithParentsCascading())
			m.WithIncident(related).Apply(ctx, o)
		}
	})
}

func (m timelineEventMods) WithIncident(rel *IncidentTemplate) TimelineEventMod {
	return TimelineEventModFunc(func(ctx context.Context, o *TimelineEventTemplate) {
		o.r.Incident = &timelineEventRIncidentR{
			o: rel,
		}
	})
}

func (m timelineEventMods) WithNewIncident(mods ...IncidentMod) TimelineEventMod {
	return TimelineEventModFunc(func(ctx context.Context, o *TimelineEventTemplate) {
		related := o.f.NewIncident(ctx, mods...)

		m.WithIncident(related).Apply(ctx, o)
	})
}

func (m timelineEventMods) WithoutIncident() TimelineEventMod {
	return TimelineEventModFunc(func(ctx context.Context, o *TimelineEventTemplate) {
		o.r.Incident = nil
	})
}
