// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	models "github.com/fishnix/ohshift/models"
)

type contextKey string

var (
	// Table context

	gooseDBVersionCtx = newContextual[*models.GooseDBVersion]("gooseDBVersion")
	incidentCtx       = newContextual[*models.Incident]("incident")
	timelineEventCtx  = newContextual[*models.TimelineEvent]("timelineEvent")

	// Relationship Contexts for goose_db_version
	gooseDBVersionWithParentsCascadingCtx = newContextual[bool]("gooseDBVersionWithParentsCascading")

	// Relationship Contexts for incidents
	incidentWithParentsCascadingCtx = newContextual[bool]("incidentWithParentsCascading")
	incidentRelTimelineEventsCtx    = newContextual[bool]("incidents.timeline_events.timeline_events.timeline_events_incident_id_fkey")

	// Relationship Contexts for timeline_events
	timelineEventWithParentsCascadingCtx = newContextual[bool]("timelineEventWithParentsCascading")
	timelineEventRelIncidentCtx          = newContextual[bool]("incidents.timeline_events.timeline_events.timeline_events_incident_id_fkey")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}
